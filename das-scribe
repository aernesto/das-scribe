import argparse
import markdown
import os
import os.path
import sys

def CreateParser():
  parser = argparse.ArgumentParser(description='Static content blogging')
  parser.add_argument('input', metavar='post_dir', type=str)
  parser.add_argument('--output', metavar='output_dir', type=str, required=True)
  return parser

def _PathHasDotfiles(path):
  base, tail = os.path.split(path)
  while tail:
    if tail.startswith('.') and len(tail) > 1:
      return True
    base, tail = os.path.split(base)
  return False

def GeneratePost(post_dir, output_dir):
  for path, _, filenames in os.walk(post_dir):
    print 'in path %s' % path
    common_prefix = os.path.commonprefix([os.path.abspath(path),
                                          os.path.abspath(output_dir)])
    if common_prefix == os.path.abspath(output_dir):
      print '  skipping self'
      continue
    if _PathHasDotfiles(path):
      print '  skipping dotfile'
      continue
    target_path = os.path.join(output_dir, path)
    if not os.path.exists(target_path):
      os.makedirs(target_path)
    for filename in filenames:
      print '  considering %s' % filename
      ext = os.path.splitext(filename)[1]
      input_name = os.path.join(path, filename)
      output_name = os.path.join(target_path, filename)
      if ext == '.md':
        output_name = '%s.html' % output_name[:-3]
        with open(output_name, 'w') as output_file:
          markdown.markdownFromFile(input=input_name, output=output_file)


def main(argv):
  parser = CreateParser()
  args = parser.parse_args(argv[1:])
  GeneratePost(args.input, args.output)

if __name__ == '__main__':
  main(sys.argv)
