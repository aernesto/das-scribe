import StringIO
import argparse
import markdown
import os
import os.path
import shutil
import sys

class Error(Exception):
  pass


class TemplateError(Error):
  def __init__(self, tmpl, msg):
    self.tmpl = tmpl
    self.msg = msg

  def __str__(self):
    return 'Error in template %r: %s' % (self.tmpl, self.msg)


def CreateParser():
  parser = argparse.ArgumentParser(description='Static content blogging')
  parser.add_argument('input', metavar='input_dir', type=str)
  parser.add_argument('output', metavar='output_dir', type=str)
  parser.add_argument('--template', metavar='template', type=str,
                      default='template.html')
  parser.add_argument('-n' '--dry_run', metavar='dry_run', type=bool,
                      default=False, dest='dry_run')
  return parser

def _PathHasDotfiles(path):
  base, tail = os.path.split(path)
  while tail:
    if tail.startswith('.') and len(tail) > 1:
      return True
    base, tail = os.path.split(base)
  return False

FILETYPE_OTHER = 1
FILETYPE_MD = 2

class ItemFile(object):
  def __init__(self, path):
    self.path = path
    self.mtime = None
    try:
      self.mtime = os.path.getmtime(path)
    except os.error:
      pass


class Item(object):
  def __init__(self, ft, src, dst):
    self.ft = ft
    self.src = ItemFile(src)
    self.dst = ItemFile(dst)


class Plan(object):
  def __init__(self):
    self._items = []
    self._items_by_dir = {}

  def AddItem(self, ft, src, dst):
    item = Item(ft, src, dst)
    self._items.append(item)

    dst_dir = os.path.dirname(dst)
    dir_list = self._items_by_dir.get(dst_dir, None)
    if not dir_list:
      dir_list = []
      self._items_by_dir[dst_dir] = dir_list
    dir_list.append(item)

  def IterDirs(self):
    sorted_dirs = sorted(item for item in self._items_by_dir.iteritems())
    for dir_name, items in sorted_dirs:
      yield dir_name, items


class Blog(object):
  def __init__(self, args):
    self._input_dir = os.path.abspath(args.input)
    self._output_dir = os.path.abspath(args.output)
    self._template_file = args.template
    try:
      with open(args.template, 'r') as template_file:
        self._template_contents = template_file.read()
    except StandardError as e:
      sys.exit('Error reading template file %r\n%s' % (args.template, e))
    self._ValidateTemplate()

  def Generate(self, dry_run=False):
    plan = self._BuildPlan()
    print 'From %s, output to %s' % (self._input_dir, self._output_dir)
    for path, items in plan.IterDirs():
      mds = [item for item in items if item.ft == FILETYPE_MD]
      if any(mds):
        print '  PLAN: for dir %s, have %d items' % (path, len(items))
        if not os.path.exists(path):
          print '    creating %s' % path
          if not dry_run:
            os.makedirs(path)
        for item in items:
          dst_contents = None
          if item.ft == FILETYPE_MD:
            dst_contents = self._FillTemplate(item.src.path)
            print '    expanded template %s' % item.src.path
          print '    handling %r --> %r' % (item.src.path, item.dst.path)
          if not dry_run:
            if dst_contents:
              with open(item.dst.path, 'w') as output_file:
                output_file.write(dst_contents)
            else:
              shutil.copy(item.src.path, item.dst.path)


  def _BuildPlan(self):
    plan = Plan()
    for path, _, filenames in os.walk(self._input_dir):
      print 'in path %s' % path
      common_prefix = os.path.commonprefix(
        [os.path.abspath(path), self._output_dir])
      if common_prefix == self._output_dir:
        print '  skipping self'
        continue
      if _PathHasDotfiles(path):
        print '  skipping dotfile'
        continue
      path = path[len(self._input_dir) + 1:]
      target_path = os.path.join(self._output_dir, path)
      for filename in filenames:
        print '  considering %s' % filename
        if filename.startswith('.'):
          print '    skipping dotfile'
          continue
        ext = os.path.splitext(filename)[1]
        input_name = os.path.join(path, filename)
        output_name = os.path.join(target_path, filename)
        ft = FILETYPE_OTHER
        if ext == '.md':
          ft = FILETYPE_MD
          output_name = '%s.html' % output_name[:-3]
        plan.AddItem(ft, input_name, output_name)
    return plan

  def _ValidateTemplate(self):
    if '{{content}}' not in self._template_contents:
      raise TemplateError(self._template_file, 'missing {{content}} var')

  def _FillTemplate(self, src):
    md_io = StringIO.StringIO()
    markdown.markdownFromFile(input=src, output=md_io)
    tmpl = self._template_contents.replace('{{content}}', md_io.getvalue())
    return tmpl


def main(argv):
  parser = CreateParser()
  args = parser.parse_args(argv[1:])

  blog = Blog(args)
  blog.Generate(dry_run=args.dry_run)


if __name__ == '__main__':
  main(sys.argv)
